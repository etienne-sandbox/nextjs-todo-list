import Head from "next/head";
import { useRouter } from "next/router";
import { getTodos } from "../logic/database";
import { withIronSessionSsr } from "iron-session/next";
import { sessionConfig } from "../logic/session";
import { logout } from "../logic/api";

async function addTodo(name) {
  return fetch("/api/add-todo", {
    method: "POST",
    body: JSON.stringify({ name }),
    headers: {
      "Content-Type": "application/json",
    },
  });
}

async function toggleTodo(todoId) {
  return fetch("/api/toggle-todo", {
    method: "POST",
    body: JSON.stringify({ todoId }),
    headers: {
      "Content-Type": "application/json",
    },
  });
}

export const getServerSideProps = withIronSessionSsr(
  async function getServerSideProps(context) {
    if (!context.req.session.user) {
      return {
        redirect: {
          destination: "/login",
          permanent: false,
        },
      };
    }

    return {
      props: {
        todos: await getTodos(),
        user: context.req.session.user,
      },
    };
  },
  sessionConfig
);

export default function Home({ todos, user }) {
  const router = useRouter();

  function handleSubmit(event) {
    event.preventDefault();
    const form = event.currentTarget;
    const data = Object.fromEntries(new FormData(form));
    addTodo(data.name).then(() => {
      router.replace(router.asPath);
      form.reset();
    });
  }

  return (
    <div className="App">
      <Head>
        <title>Todo List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Todo List (hello {user.name})</h1>
      <button
        onClick={() => {
          logout().then(() => {
            router.replace(router.asPath);
          });
        }}
      >
        Logout
      </button>
      <ul>
        {todos.map((todo) => {
          return (
            <li
              key={todo.id}
              style={{ textDecoration: todo.done ? "line-through" : "none" }}
              onClick={() => {
                toggleTodo(todo.id).then(() => {
                  router.replace(router.asPath);
                });
              }}
            >
              {todo.name}
            </li>
          );
        })}
      </ul>
      <form onSubmit={handleSubmit}>
        <input type="text" name="name" placeholder="New todo" required />
        <button type="submit">Add</button>
      </form>
    </div>
  );
}
